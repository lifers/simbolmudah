// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
windows_core::imp::define_interface!(
    IKeyboardHook,
    IKeyboardHook_Vtbl,
    0xbbbd064a_b62f_50dd_baed_68008d8a8371
);
impl windows_core::RuntimeType for IKeyboardHook {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IKeyboardHook_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ResetStage: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub OnStateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnStateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub OnKeyEvent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnKeyEvent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyboardHookFactory,
    IKeyboardHookFactory_Vtbl,
    0xed7819e6_f21e_54c9_ab1c_eeb9de4c18f2
);
impl windows_core::RuntimeType for IKeyboardHookFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IKeyboardHookFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyboardTranslator,
    IKeyboardTranslator_Vtbl,
    0xdb43efff_7a2f_5a1f_bdd5_cc4176aeaac5
);
impl windows_core::RuntimeType for IKeyboardTranslator {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IKeyboardTranslator_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TranslateAndForward: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        bool,
        bool,
        bool,
        u8,
    ) -> windows_core::HRESULT,
    pub CheckLayoutAndUpdate:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub OnTranslated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnTranslated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub OnInvalid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnInvalid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub OnKeyTranslated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnKeyTranslated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyboardTranslatorFactory,
    IKeyboardTranslatorFactory_Vtbl,
    0x53b7cb66_7ff7_506c_a68b_ee25ddaf9709
);
impl windows_core::RuntimeType for IKeyboardTranslatorFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IKeyboardTranslatorFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INotifyIcon,
    INotifyIcon_Vtbl,
    0xa03d1fb1_ad9b_5217_8775_51bb02df4a37
);
impl windows_core::RuntimeType for INotifyIcon {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct INotifyIcon_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SubscribeStateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OnSelected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnSelected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISequenceDefinition,
    ISequenceDefinition_Vtbl,
    0x09f566ee_0de2_51b8_aef7_3d4bb720bff2
);
impl windows_core::RuntimeType for ISequenceDefinition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct ISequenceDefinition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Build: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<windows_core::HSTRING>,
        core::mem::MaybeUninit<windows_core::HSTRING>,
    ) -> windows_core::HRESULT,
    pub PotentialPrefix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<windows_core::HSTRING>,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Search: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<windows_core::HSTRING>,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct KeyboardHook(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    KeyboardHook,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl KeyboardHook {
    pub fn ResetStage(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ResetStage)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn OnStateChanged<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<windows::Foundation::TypedEventHandler<KeyboardHook, u8>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnStateChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnStateChanged(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnStateChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnKeyEvent<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardHook, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnKeyEvent)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnKeyEvent(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnKeyEvent)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CreateInstance<P0>(translator: P0) -> windows_core::Result<KeyboardHook>
    where
        P0: windows_core::Param<KeyboardTranslator>,
    {
        Self::IKeyboardHookFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                translator.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[doc(hidden)]
    pub fn IKeyboardHookFactory<R, F: FnOnce(&IKeyboardHookFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<KeyboardHook, IKeyboardHookFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for KeyboardHook {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IKeyboardHook>();
}
unsafe impl windows_core::Interface for KeyboardHook {
    type Vtable = IKeyboardHook_Vtbl;
    const IID: windows_core::GUID = <IKeyboardHook as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for KeyboardHook {
    const NAME: &'static str = "LibSimbolMudah.KeyboardHook";
}
unsafe impl Send for KeyboardHook {}
unsafe impl Sync for KeyboardHook {}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct KeyboardTranslator(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    KeyboardTranslator,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl KeyboardTranslator {
    pub fn TranslateAndForward(
        &self,
        vkcode: u32,
        scancode: u32,
        hascapslock: bool,
        hasshift: bool,
        hasaltgr: bool,
        destination: u8,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).TranslateAndForward)(
                windows_core::Interface::as_raw(this),
                vkcode,
                scancode,
                hascapslock,
                hasshift,
                hasaltgr,
                destination,
            )
            .ok()
        }
    }
    pub fn CheckLayoutAndUpdate(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).CheckLayoutAndUpdate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnTranslated<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnTranslated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnTranslated(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnTranslated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnInvalid<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnInvalid)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnInvalid(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnInvalid)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnKeyTranslated<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnKeyTranslated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnKeyTranslated(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnKeyTranslated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CreateInstance<P0>(definition: P0) -> windows_core::Result<KeyboardTranslator>
    where
        P0: windows_core::Param<SequenceDefinition>,
    {
        Self::IKeyboardTranslatorFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                definition.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[doc(hidden)]
    pub fn IKeyboardTranslatorFactory<
        R,
        F: FnOnce(&IKeyboardTranslatorFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            KeyboardTranslator,
            IKeyboardTranslatorFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for KeyboardTranslator {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IKeyboardTranslator>();
}
unsafe impl windows_core::Interface for KeyboardTranslator {
    type Vtable = IKeyboardTranslator_Vtbl;
    const IID: windows_core::GUID = <IKeyboardTranslator as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for KeyboardTranslator {
    const NAME: &'static str = "LibSimbolMudah.KeyboardTranslator";
}
unsafe impl Send for KeyboardTranslator {}
unsafe impl Sync for KeyboardTranslator {}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct NotifyIcon(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    NotifyIcon,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl NotifyIcon {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            NotifyIcon,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn SubscribeStateChanged<P0>(&self, hook: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<KeyboardHook>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SubscribeStateChanged)(
                windows_core::Interface::as_raw(this),
                hook.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnSelected<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<NotifyIcon, windows::Graphics::PointInt32>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnSelected)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnSelected(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnSelected)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for NotifyIcon {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, INotifyIcon>();
}
unsafe impl windows_core::Interface for NotifyIcon {
    type Vtable = INotifyIcon_Vtbl;
    const IID: windows_core::GUID = <INotifyIcon as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for NotifyIcon {
    const NAME: &'static str = "LibSimbolMudah.NotifyIcon";
}
unsafe impl Send for NotifyIcon {}
unsafe impl Sync for NotifyIcon {}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct SequenceDefinition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SequenceDefinition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl SequenceDefinition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SequenceDefinition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Build(
        &self,
        keysymdef: &windows_core::HSTRING,
        composedef: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Build)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(keysymdef),
                core::mem::transmute_copy(composedef),
            )
            .ok()
        }
    }
    pub fn PotentialPrefix(
        &self,
        sequence: &windows_core::HSTRING,
        limit: u32,
    ) -> windows_core::Result<windows::Foundation::Collections::IVectorView<SequenceDescription>>
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PotentialPrefix)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(sequence),
                limit,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Search(
        &self,
        sequence: &windows_core::HSTRING,
        limit: u32,
    ) -> windows_core::Result<windows::Foundation::Collections::IVectorView<SequenceDescription>>
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Search)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(sequence),
                limit,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for SequenceDefinition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISequenceDefinition>();
}
unsafe impl windows_core::Interface for SequenceDefinition {
    type Vtable = ISequenceDefinition_Vtbl;
    const IID: windows_core::GUID = <ISequenceDefinition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SequenceDefinition {
    const NAME: &'static str = "LibSimbolMudah.SequenceDefinition";
}
unsafe impl Send for SequenceDefinition {}
unsafe impl Sync for SequenceDefinition {}
#[repr(C)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SequenceDescription {
    pub sequence: windows_core::HSTRING,
    pub result: windows_core::HSTRING,
    pub description: windows_core::HSTRING,
}
impl windows_core::TypeKind for SequenceDescription {
    type TypeKind = windows_core::CloneType;
}
impl windows_core::RuntimeType for SequenceDescription {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"struct(LibSimbolMudah.SequenceDescription;string;string;string)",
    );
}
impl Default for SequenceDescription {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
pub trait IKeyboardHook_Impl: Sized {
    fn ResetStage(&self) -> windows_core::Result<()>;
    fn OnStateChanged(
        &self,
        handler: Option<&windows::Foundation::TypedEventHandler<KeyboardHook, u8>>,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnStateChanged(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
    fn OnKeyEvent(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardHook, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnKeyEvent(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IKeyboardHook {
    const NAME: &'static str = "LibSimbolMudah.IKeyboardHook";
}
impl IKeyboardHook_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IKeyboardHook_Vtbl
    where
        Identity: IKeyboardHook_Impl,
    {
        unsafe extern "system" fn ResetStage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardHook_Impl::ResetStage(this).into()
        }
        unsafe extern "system" fn OnStateChanged<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardHook_Impl::OnStateChanged(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnStateChanged<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardHook_Impl::RemoveOnStateChanged(this, core::mem::transmute(&token)).into()
        }
        unsafe extern "system" fn OnKeyEvent<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardHook_Impl::OnKeyEvent(this, windows_core::from_raw_borrowed(&handler)) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnKeyEvent<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardHook_Impl::RemoveOnKeyEvent(this, core::mem::transmute(&token)).into()
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyboardHook, OFFSET>(),
            ResetStage: ResetStage::<Identity, OFFSET>,
            OnStateChanged: OnStateChanged::<Identity, OFFSET>,
            RemoveOnStateChanged: RemoveOnStateChanged::<Identity, OFFSET>,
            OnKeyEvent: OnKeyEvent::<Identity, OFFSET>,
            RemoveOnKeyEvent: RemoveOnKeyEvent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyboardHook as windows_core::Interface>::IID
    }
}
pub trait IKeyboardHookFactory_Impl: Sized {
    fn CreateInstance(
        &self,
        translator: Option<&KeyboardTranslator>,
    ) -> windows_core::Result<KeyboardHook>;
}
impl windows_core::RuntimeName for IKeyboardHookFactory {
    const NAME: &'static str = "LibSimbolMudah.IKeyboardHookFactory";
}
impl IKeyboardHookFactory_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IKeyboardHookFactory_Vtbl
    where
        Identity: IKeyboardHookFactory_Impl,
    {
        unsafe extern "system" fn CreateInstance<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            translator: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHookFactory_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardHookFactory_Impl::CreateInstance(
                this,
                windows_core::from_raw_borrowed(&translator),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyboardHookFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyboardHookFactory as windows_core::Interface>::IID
    }
}
pub trait IKeyboardTranslator_Impl: Sized {
    fn TranslateAndForward(
        &self,
        vkcode: u32,
        scancode: u32,
        hascapslock: bool,
        hasshift: bool,
        hasaltgr: bool,
        destination: u8,
    ) -> windows_core::Result<()>;
    fn CheckLayoutAndUpdate(&self) -> windows_core::Result<()>;
    fn OnTranslated(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnTranslated(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
    fn OnInvalid(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnInvalid(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
    fn OnKeyTranslated(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnKeyTranslated(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IKeyboardTranslator {
    const NAME: &'static str = "LibSimbolMudah.IKeyboardTranslator";
}
impl IKeyboardTranslator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IKeyboardTranslator_Vtbl
    where
        Identity: IKeyboardTranslator_Impl,
    {
        unsafe extern "system" fn TranslateAndForward<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            vkcode: u32,
            scancode: u32,
            hascapslock: bool,
            hasshift: bool,
            hasaltgr: bool,
            destination: u8,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::TranslateAndForward(
                this,
                vkcode,
                scancode,
                hascapslock,
                hasshift,
                hasaltgr,
                destination,
            )
            .into()
        }
        unsafe extern "system" fn CheckLayoutAndUpdate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::CheckLayoutAndUpdate(this).into()
        }
        unsafe extern "system" fn OnTranslated<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardTranslator_Impl::OnTranslated(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnTranslated<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::RemoveOnTranslated(this, core::mem::transmute(&token)).into()
        }
        unsafe extern "system" fn OnInvalid<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardTranslator_Impl::OnInvalid(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnInvalid<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::RemoveOnInvalid(this, core::mem::transmute(&token)).into()
        }
        unsafe extern "system" fn OnKeyTranslated<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardTranslator_Impl::OnKeyTranslated(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnKeyTranslated<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::RemoveOnKeyTranslated(this, core::mem::transmute(&token))
                .into()
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyboardTranslator, OFFSET>(),
            TranslateAndForward: TranslateAndForward::<Identity, OFFSET>,
            CheckLayoutAndUpdate: CheckLayoutAndUpdate::<Identity, OFFSET>,
            OnTranslated: OnTranslated::<Identity, OFFSET>,
            RemoveOnTranslated: RemoveOnTranslated::<Identity, OFFSET>,
            OnInvalid: OnInvalid::<Identity, OFFSET>,
            RemoveOnInvalid: RemoveOnInvalid::<Identity, OFFSET>,
            OnKeyTranslated: OnKeyTranslated::<Identity, OFFSET>,
            RemoveOnKeyTranslated: RemoveOnKeyTranslated::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyboardTranslator as windows_core::Interface>::IID
    }
}
pub trait IKeyboardTranslatorFactory_Impl: Sized {
    fn CreateInstance(
        &self,
        definition: Option<&SequenceDefinition>,
    ) -> windows_core::Result<KeyboardTranslator>;
}
impl windows_core::RuntimeName for IKeyboardTranslatorFactory {
    const NAME: &'static str = "LibSimbolMudah.IKeyboardTranslatorFactory";
}
impl IKeyboardTranslatorFactory_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IKeyboardTranslatorFactory_Vtbl
    where
        Identity: IKeyboardTranslatorFactory_Impl,
    {
        unsafe extern "system" fn CreateInstance<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            definition: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslatorFactory_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardTranslatorFactory_Impl::CreateInstance(
                this,
                windows_core::from_raw_borrowed(&definition),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IKeyboardTranslatorFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyboardTranslatorFactory as windows_core::Interface>::IID
    }
}
pub trait INotifyIcon_Impl: Sized {
    fn SubscribeStateChanged(&self, hook: Option<&KeyboardHook>) -> windows_core::Result<()>;
    fn OnSelected(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<NotifyIcon, windows::Graphics::PointInt32>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnSelected(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for INotifyIcon {
    const NAME: &'static str = "LibSimbolMudah.INotifyIcon";
}
impl INotifyIcon_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>() -> INotifyIcon_Vtbl
    where
        Identity: INotifyIcon_Impl,
    {
        unsafe extern "system" fn SubscribeStateChanged<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            hook: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: INotifyIcon_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            INotifyIcon_Impl::SubscribeStateChanged(this, windows_core::from_raw_borrowed(&hook))
                .into()
        }
        unsafe extern "system" fn OnSelected<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: INotifyIcon_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match INotifyIcon_Impl::OnSelected(this, windows_core::from_raw_borrowed(&handler)) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnSelected<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: INotifyIcon_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            INotifyIcon_Impl::RemoveOnSelected(this, core::mem::transmute(&token)).into()
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, INotifyIcon, OFFSET>(),
            SubscribeStateChanged: SubscribeStateChanged::<Identity, OFFSET>,
            OnSelected: OnSelected::<Identity, OFFSET>,
            RemoveOnSelected: RemoveOnSelected::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INotifyIcon as windows_core::Interface>::IID
    }
}
pub trait ISequenceDefinition_Impl: Sized {
    fn Build(
        &self,
        keysymdef: &windows_core::HSTRING,
        composedef: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn PotentialPrefix(
        &self,
        sequence: &windows_core::HSTRING,
        limit: u32,
    ) -> windows_core::Result<windows::Foundation::Collections::IVectorView<SequenceDescription>>;
    fn Search(
        &self,
        sequence: &windows_core::HSTRING,
        limit: u32,
    ) -> windows_core::Result<windows::Foundation::Collections::IVectorView<SequenceDescription>>;
}
impl windows_core::RuntimeName for ISequenceDefinition {
    const NAME: &'static str = "LibSimbolMudah.ISequenceDefinition";
}
impl ISequenceDefinition_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> ISequenceDefinition_Vtbl
    where
        Identity: ISequenceDefinition_Impl,
    {
        unsafe extern "system" fn Build<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            keysymdef: core::mem::MaybeUninit<windows_core::HSTRING>,
            composedef: core::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceDefinition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            ISequenceDefinition_Impl::Build(
                this,
                core::mem::transmute(&keysymdef),
                core::mem::transmute(&composedef),
            )
            .into()
        }
        unsafe extern "system" fn PotentialPrefix<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sequence: core::mem::MaybeUninit<windows_core::HSTRING>,
            limit: u32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceDefinition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match ISequenceDefinition_Impl::PotentialPrefix(
                this,
                core::mem::transmute(&sequence),
                limit,
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Search<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sequence: core::mem::MaybeUninit<windows_core::HSTRING>,
            limit: u32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceDefinition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match ISequenceDefinition_Impl::Search(this, core::mem::transmute(&sequence), limit) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISequenceDefinition, OFFSET>(),
            Build: Build::<Identity, OFFSET>,
            PotentialPrefix: PotentialPrefix::<Identity, OFFSET>,
            Search: Search::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISequenceDefinition as windows_core::Interface>::IID
    }
}
