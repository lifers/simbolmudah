// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
windows_core::imp::define_interface!(
    IKeyboardHook,
    IKeyboardHook_Vtbl,
    0x380ae0fa_0662_53ed_a3c8_c172a834a97a
);
impl windows_core::RuntimeType for IKeyboardHook {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IKeyboardHook_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Deactivate: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub DebugStateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveDebugStateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub DebugKeyEvent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveDebugKeyEvent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyboardHookFactory,
    IKeyboardHookFactory_Vtbl,
    0xed7819e6_f21e_54c9_ab1c_eeb9de4c18f2
);
impl windows_core::RuntimeType for IKeyboardHookFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IKeyboardHookFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyboardTranslator,
    IKeyboardTranslator_Vtbl,
    0x717f286f_c7e3_50e9_a98e_c8599d927190
);
impl windows_core::RuntimeType for IKeyboardTranslator {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IKeyboardTranslator_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TranslateAndForward: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        bool,
        bool,
        bool,
        u8,
    ) -> windows_core::HRESULT,
    pub CheckLayoutAndUpdate:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub BuildTranslator: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<windows_core::HSTRING>,
        core::mem::MaybeUninit<windows_core::HSTRING>,
    ) -> windows_core::HRESULT,
    pub OnTranslated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnTranslated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub OnInvalid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnInvalid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISequenceDescription,
    ISequenceDescription_Vtbl,
    0x7892f65c_0554_50a8_b18a_052fa902fec5
);
impl windows_core::RuntimeType for ISequenceDescription {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct ISequenceDescription_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub sequence: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub result: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<windows_core::HSTRING>,
    ) -> windows_core::HRESULT,
    pub description: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<windows_core::HSTRING>,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISequenceSearcher,
    ISequenceSearcher_Vtbl,
    0xede90f31_fce3_5f38_ae85_5ff44e216df5
);
impl windows_core::RuntimeType for ISequenceSearcher {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct ISequenceSearcher_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Search: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<windows_core::HSTRING>,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OnSearchResult: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
    pub RemoveOnSearchResult: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::EventRegistrationToken,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct KeyboardHook(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    KeyboardHook,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl KeyboardHook {
    pub fn Deactivate(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Deactivate)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn DebugStateChanged<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardHook, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DebugStateChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDebugStateChanged(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDebugStateChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DebugKeyEvent<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardHook, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DebugKeyEvent)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDebugKeyEvent(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDebugKeyEvent)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CreateInstance<P0>(translator: P0) -> windows_core::Result<KeyboardHook>
    where
        P0: windows_core::Param<KeyboardTranslator>,
    {
        Self::IKeyboardHookFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                translator.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[doc(hidden)]
    pub fn IKeyboardHookFactory<R, F: FnOnce(&IKeyboardHookFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<KeyboardHook, IKeyboardHookFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for KeyboardHook {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IKeyboardHook>();
}
unsafe impl windows_core::Interface for KeyboardHook {
    type Vtable = IKeyboardHook_Vtbl;
    const IID: windows_core::GUID = <IKeyboardHook as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for KeyboardHook {
    const NAME: &'static str = "LibSimbolMudah.KeyboardHook";
}
unsafe impl Send for KeyboardHook {}
unsafe impl Sync for KeyboardHook {}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct KeyboardTranslator(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    KeyboardTranslator,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl KeyboardTranslator {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            KeyboardTranslator,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn TranslateAndForward(
        &self,
        vkcode: u32,
        scancode: u32,
        hascapslock: bool,
        hasshift: bool,
        hasaltgr: bool,
        destination: u8,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).TranslateAndForward)(
                windows_core::Interface::as_raw(this),
                vkcode,
                scancode,
                hascapslock,
                hasshift,
                hasaltgr,
                destination,
            )
            .ok()
        }
    }
    pub fn CheckLayoutAndUpdate(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).CheckLayoutAndUpdate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn BuildTranslator(
        &self,
        keysymdef: &windows_core::HSTRING,
        composedef: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).BuildTranslator)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(keysymdef),
                core::mem::transmute_copy(composedef),
            )
            .ok()
        }
    }
    pub fn OnTranslated<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnTranslated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnTranslated(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnTranslated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnInvalid<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnInvalid)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnInvalid(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnInvalid)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for KeyboardTranslator {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IKeyboardTranslator>();
}
unsafe impl windows_core::Interface for KeyboardTranslator {
    type Vtable = IKeyboardTranslator_Vtbl;
    const IID: windows_core::GUID = <IKeyboardTranslator as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for KeyboardTranslator {
    const NAME: &'static str = "LibSimbolMudah.KeyboardTranslator";
}
unsafe impl Send for KeyboardTranslator {}
unsafe impl Sync for KeyboardTranslator {}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct SequenceDescription(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SequenceDescription,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl SequenceDescription {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SequenceDescription,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn sequence(
        &self,
    ) -> windows_core::Result<windows::Foundation::Collections::IVectorView<u32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).sequence)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn result(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).result)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn description(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).description)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for SequenceDescription {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISequenceDescription>();
}
unsafe impl windows_core::Interface for SequenceDescription {
    type Vtable = ISequenceDescription_Vtbl;
    const IID: windows_core::GUID = <ISequenceDescription as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SequenceDescription {
    const NAME: &'static str = "LibSimbolMudah.SequenceDescription";
}
unsafe impl Send for SequenceDescription {}
unsafe impl Sync for SequenceDescription {}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct SequenceSearcher(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SequenceSearcher,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl SequenceSearcher {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SequenceSearcher,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Search(
        &self,
        keyword: &windows_core::HSTRING,
    ) -> windows_core::Result<windows::Foundation::IAsyncAction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Search)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(keyword),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnSearchResult<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                SequenceSearcher,
                windows::Foundation::Collections::IVectorView<SequenceDescription>,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnSearchResult)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOnSearchResult(
        &self,
        token: windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOnSearchResult)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SequenceSearcher {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISequenceSearcher>();
}
unsafe impl windows_core::Interface for SequenceSearcher {
    type Vtable = ISequenceSearcher_Vtbl;
    const IID: windows_core::GUID = <ISequenceSearcher as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SequenceSearcher {
    const NAME: &'static str = "LibSimbolMudah.SequenceSearcher";
}
unsafe impl Send for SequenceSearcher {}
unsafe impl Sync for SequenceSearcher {}
pub trait IKeyboardHook_Impl: Sized {
    fn Deactivate(&self) -> windows_core::Result<()>;
    fn DebugStateChanged(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardHook, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveDebugStateChanged(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
    fn DebugKeyEvent(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardHook, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveDebugKeyEvent(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IKeyboardHook {
    const NAME: &'static str = "LibSimbolMudah.IKeyboardHook";
}
impl IKeyboardHook_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IKeyboardHook_Vtbl
    where
        Identity: IKeyboardHook_Impl,
    {
        unsafe extern "system" fn Deactivate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardHook_Impl::Deactivate(this).into()
        }
        unsafe extern "system" fn DebugStateChanged<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardHook_Impl::DebugStateChanged(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveDebugStateChanged<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardHook_Impl::RemoveDebugStateChanged(this, core::mem::transmute(&token)).into()
        }
        unsafe extern "system" fn DebugKeyEvent<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardHook_Impl::DebugKeyEvent(this, windows_core::from_raw_borrowed(&handler))
            {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveDebugKeyEvent<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHook_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardHook_Impl::RemoveDebugKeyEvent(this, core::mem::transmute(&token)).into()
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyboardHook, OFFSET>(),
            Deactivate: Deactivate::<Identity, OFFSET>,
            DebugStateChanged: DebugStateChanged::<Identity, OFFSET>,
            RemoveDebugStateChanged: RemoveDebugStateChanged::<Identity, OFFSET>,
            DebugKeyEvent: DebugKeyEvent::<Identity, OFFSET>,
            RemoveDebugKeyEvent: RemoveDebugKeyEvent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyboardHook as windows_core::Interface>::IID
    }
}
pub trait IKeyboardHookFactory_Impl: Sized {
    fn CreateInstance(
        &self,
        translator: Option<&KeyboardTranslator>,
    ) -> windows_core::Result<KeyboardHook>;
}
impl windows_core::RuntimeName for IKeyboardHookFactory {
    const NAME: &'static str = "LibSimbolMudah.IKeyboardHookFactory";
}
impl IKeyboardHookFactory_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IKeyboardHookFactory_Vtbl
    where
        Identity: IKeyboardHookFactory_Impl,
    {
        unsafe extern "system" fn CreateInstance<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            translator: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardHookFactory_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardHookFactory_Impl::CreateInstance(
                this,
                windows_core::from_raw_borrowed(&translator),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyboardHookFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyboardHookFactory as windows_core::Interface>::IID
    }
}
pub trait IKeyboardTranslator_Impl: Sized {
    fn TranslateAndForward(
        &self,
        vkcode: u32,
        scancode: u32,
        hascapslock: bool,
        hasshift: bool,
        hasaltgr: bool,
        destination: u8,
    ) -> windows_core::Result<()>;
    fn CheckLayoutAndUpdate(&self) -> windows_core::Result<()>;
    fn BuildTranslator(
        &self,
        keysymdef: &windows_core::HSTRING,
        composedef: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn OnTranslated(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnTranslated(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
    fn OnInvalid(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<KeyboardTranslator, windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnInvalid(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IKeyboardTranslator {
    const NAME: &'static str = "LibSimbolMudah.IKeyboardTranslator";
}
impl IKeyboardTranslator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IKeyboardTranslator_Vtbl
    where
        Identity: IKeyboardTranslator_Impl,
    {
        unsafe extern "system" fn TranslateAndForward<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            vkcode: u32,
            scancode: u32,
            hascapslock: bool,
            hasshift: bool,
            hasaltgr: bool,
            destination: u8,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::TranslateAndForward(
                this,
                vkcode,
                scancode,
                hascapslock,
                hasshift,
                hasaltgr,
                destination,
            )
            .into()
        }
        unsafe extern "system" fn CheckLayoutAndUpdate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::CheckLayoutAndUpdate(this).into()
        }
        unsafe extern "system" fn BuildTranslator<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            keysymdef: core::mem::MaybeUninit<windows_core::HSTRING>,
            composedef: core::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::BuildTranslator(
                this,
                core::mem::transmute(&keysymdef),
                core::mem::transmute(&composedef),
            )
            .into()
        }
        unsafe extern "system" fn OnTranslated<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardTranslator_Impl::OnTranslated(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnTranslated<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::RemoveOnTranslated(this, core::mem::transmute(&token)).into()
        }
        unsafe extern "system" fn OnInvalid<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IKeyboardTranslator_Impl::OnInvalid(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnInvalid<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: IKeyboardTranslator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IKeyboardTranslator_Impl::RemoveOnInvalid(this, core::mem::transmute(&token)).into()
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyboardTranslator, OFFSET>(),
            TranslateAndForward: TranslateAndForward::<Identity, OFFSET>,
            CheckLayoutAndUpdate: CheckLayoutAndUpdate::<Identity, OFFSET>,
            BuildTranslator: BuildTranslator::<Identity, OFFSET>,
            OnTranslated: OnTranslated::<Identity, OFFSET>,
            RemoveOnTranslated: RemoveOnTranslated::<Identity, OFFSET>,
            OnInvalid: OnInvalid::<Identity, OFFSET>,
            RemoveOnInvalid: RemoveOnInvalid::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyboardTranslator as windows_core::Interface>::IID
    }
}
pub trait ISequenceDescription_Impl: Sized {
    fn sequence(&self) -> windows_core::Result<windows::Foundation::Collections::IVectorView<u32>>;
    fn result(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn description(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl windows_core::RuntimeName for ISequenceDescription {
    const NAME: &'static str = "LibSimbolMudah.ISequenceDescription";
}
impl ISequenceDescription_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> ISequenceDescription_Vtbl
    where
        Identity: ISequenceDescription_Impl,
    {
        unsafe extern "system" fn sequence<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceDescription_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match ISequenceDescription_Impl::sequence(this) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceDescription_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match ISequenceDescription_Impl::result(this) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn description<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceDescription_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match ISequenceDescription_Impl::description(this) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISequenceDescription, OFFSET>(
            ),
            sequence: sequence::<Identity, OFFSET>,
            result: result::<Identity, OFFSET>,
            description: description::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISequenceDescription as windows_core::Interface>::IID
    }
}
pub trait ISequenceSearcher_Impl: Sized {
    fn Search(
        &self,
        keyword: &windows_core::HSTRING,
    ) -> windows_core::Result<windows::Foundation::IAsyncAction>;
    fn OnSearchResult(
        &self,
        handler: Option<
            &windows::Foundation::TypedEventHandler<
                SequenceSearcher,
                windows::Foundation::Collections::IVectorView<SequenceDescription>,
            >,
        >,
    ) -> windows_core::Result<windows::Foundation::EventRegistrationToken>;
    fn RemoveOnSearchResult(
        &self,
        token: &windows::Foundation::EventRegistrationToken,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for ISequenceSearcher {
    const NAME: &'static str = "LibSimbolMudah.ISequenceSearcher";
}
impl ISequenceSearcher_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> ISequenceSearcher_Vtbl
    where
        Identity: ISequenceSearcher_Impl,
    {
        unsafe extern "system" fn Search<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            keyword: core::mem::MaybeUninit<windows_core::HSTRING>,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceSearcher_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match ISequenceSearcher_Impl::Search(this, core::mem::transmute(&keyword)) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnSearchResult<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceSearcher_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match ISequenceSearcher_Impl::OnSearchResult(
                this,
                windows_core::from_raw_borrowed(&handler),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveOnSearchResult<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: windows::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT
        where
            Identity: ISequenceSearcher_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            ISequenceSearcher_Impl::RemoveOnSearchResult(this, core::mem::transmute(&token)).into()
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISequenceSearcher, OFFSET>(),
            Search: Search::<Identity, OFFSET>,
            OnSearchResult: OnSearchResult::<Identity, OFFSET>,
            RemoveOnSearchResult: RemoveOnSearchResult::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISequenceSearcher as windows_core::Interface>::IID
    }
}
